# Node.js
# Build a general Node.js project with npm.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/javascript

trigger:
- none
#- main
variables:
  imageRepo: demoapp
  tag: '$(Build.BuildId)'
stages:
- stage: Build
  displayName: Build image
  jobs:
  - job: Build
    displayName: Build
    pool:
      vmImage: ubuntu-latest
    steps:
    - task: NodeTool@0
      inputs:
        versionSpec: '14.x'
      displayName: 'Install Node.js'

    - script: |
        npm ci
      displayName: 'npm clean install'
      workingDirectory: 'src'
    - script: |
        npm run test-junit    
        npm run test
        npm run lint
        npm run lint-fix
      displayName: 'Run linting and tests'
      workingDirectory: 'src'
    - task: CopyFiles@2
      inputs:
        sourceFolder: '$(Build.SourcesDirectory)'
        contents: |
          src/**
          Dockerfile
        targetFolder: '$(Build.ArtifactStagingDirectory)'
      displayName: 'Copy files to artifact staging directory'

    - task: PublishPipelineArtifact@1
      inputs:
        artifactName: nodejs-demo
        targetPath: '$(Build.ArtifactStagingDirectory)'
        publishLocation: 'pipeline'
      displayName: 'Publish npm artifact'

    - task: DownloadPipelineArtifact@2
      inputs:
        artifactName: 'nodejs-demo'
        targetPath: '$(Build.ArtifactStagingDirectory)'
      displayName: 'Download npm artifact'

    #- task: CopyFiles@2
    #  inputs:
    #    sourceFolder: '$(Build.ArtifactStagingDirectory)/src'
    #    contents: '**'
    #    targetFolder: '$(Build.SourcesDirectory)'

    - task: Docker@2
      displayName: 'Build and Push Docker Image'
      inputs:
        containerRegistry: 'GPA DH connect'
        repository: 'gedpal/demo'
        command: 'buildAndPush'
        Dockerfile: '$(Build.ArtifactStagingDirectory)/Dockerfile'
        tags: $(tag)
        
- stage: Deploy
  displayName: Deploy to Dev
  dependsOn: Build
  variables:
    acrsecret: k8sdemoacrauth
    acrdevurl: 'k8sdemoacr.azurecr.io'
    replicaNo: 3
  jobs:
  - deployment: Deploy
    displayName: Deploy to AKS
    environment: 'k8sdev.demoapp'
    pool: 
      vmImage: ubuntu-latest
    strategy:
      runOnce:
        deploy:
          steps:
          - task: DownloadPipelineArtifact@2
            inputs:
              buildType: 'current'
              artifactName: 'manifests'
              targetPath: '$(Pipeline.Workspace)/manifests'
          - task: KubernetesManifest@0
            inputs:
              action: 'createSecret'
              namespace: 'default'
              secretType: 'dockerRegistry'
              secretName: '$(acrsecret)'
              dockerRegistryEndpoint: 'K8SDemoAppACR'
          - task: replacetokens@3
            displayName: Replace Tokens
            inputs:
              rootDirectory: '$(Pipeline.Workspace)/manifests/'
              targetFiles: 'deployment.yml'
              encoding: 'auto'
              writeBOM: true
              actionOnMissing: 'warn'
              keepToken: false
              tokenPrefix: '#'
              tokenSuffix: '#'
              useLegacyPattern: false
              enableTransforms: false
              enableTelemetry: true
          - task: KubernetesManifest@0
            inputs:
              action: 'deploy'
              namespace: 'default'
              manifests: |
                $(Pipeline.Workspace)/manifests/deployment.yml
                $(Pipeline.Workspace)/manifests/service.yml
              containers: '$(acrdevurl)/$(imageRepo):$(tag)'
              imagePullSecrets: '$(acrsecret)'
